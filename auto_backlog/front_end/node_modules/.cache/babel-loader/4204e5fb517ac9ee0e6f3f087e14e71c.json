{"ast":null,"code":"var _jsxFileName = \"D:\\\\BLDE_SVN\\\\70_member\\\\XuanLA\\\\auto_backlog\\\\auto_front\\\\src\\\\App.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { API_URL, PRO_PREFIX, BACKLOG_API_KEY, BACKLOG_URL, BACKLOG_STATUS, AUTO_UPDATE_MIN, LUPACK_ATTR, WORKING_TIME } from \"./utilities/constants.js\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    const date = new Date();\n    this.state = {\n      hour: this.checkTime(date.getHours()),\n      minute: this.checkTime(date.getMinutes()),\n      second: this.checkTime(date.getSeconds()),\n      crt_minute: \"\",\n      beUpdateTickets: \"\"\n    };\n    this.autoUpdate = this.autoUpdate.bind(this);\n    this.checkTime = this.checkTime.bind(this);\n  }\n\n  checkTime(elem) {\n    if (elem < 10) {\n      elem = \"0\" + elem;\n    }\n\n    return elem;\n  } //Kiểm tra giờ giấc hợp lệ thì update\n\n\n  autoUpdate() {\n    const date = new Date();\n    this.setState({\n      hour: this.checkTime(date.getHours()),\n      minute: this.checkTime(date.getMinutes()),\n      second: this.checkTime(date.getSeconds())\n    });\n    let crt_minute = this.state.crt_minute;\n    let minute = this.state.minute;\n\n    if (this.state.hour >= WORKING_TIME.start && this.state.hour < WORKING_TIME.end) {\n      if (minute == 19 && minute !== crt_minute) {\n        this.setState({\n          crt_minute: minute\n        });\n        this.getDataLupack();\n      }\n    }\n  } //Set thời gian update logic. Hiện tại: Cứ 1000ms thì update 1 lần\n\n\n  componentDidMount() {\n    window.setInterval(this.autoUpdate, 1000);\n  } //Lấy data từ Lupack\n\n\n  getDataLupack() {\n    const mileStone = LUPACK_ATTR.mileStone;\n    const tmp = mileStone.LuDev + \"-\" + mileStone.LuTest + \"-\" + mileStone.LuFix;\n    const url = API_URL + \"fdoc_t_ticket/find/pro_id=\" + LUPACK_ATTR.proId + \"&mile_stone=\" + tmp + \"&status=\" + LUPACK_ATTR.status;\n    axios.get(url).then(response => {\n      this.updateBacklog(response.data.entities.tickets);\n    });\n  } //Update Backlog\n\n\n  updateBacklog(tickets) {\n    const ary = ['abc', 'def', 'ghi'];\n    console.log('1');\n    tickets.forEach((elem, i) => {\n      console.log('2');\n    });\n    console.log('3');\n  } //Dùng để vẽ màn hình\n\n\n  render() {\n    const state = this.state;\n    const time = state.hour + \":\" + state.minute + \":\" + state.second;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, time));\n  }\n\n}","map":{"version":3,"sources":["D:/BLDE_SVN/70_member/XuanLA/auto_backlog/auto_front/src/App.js"],"names":["React","axios","API_URL","PRO_PREFIX","BACKLOG_API_KEY","BACKLOG_URL","BACKLOG_STATUS","AUTO_UPDATE_MIN","LUPACK_ATTR","WORKING_TIME","App","Component","constructor","props","date","Date","state","hour","checkTime","getHours","minute","getMinutes","second","getSeconds","crt_minute","beUpdateTickets","autoUpdate","bind","elem","setState","start","end","getDataLupack","componentDidMount","window","setInterval","mileStone","tmp","LuDev","LuTest","LuFix","url","proId","status","get","then","response","updateBacklog","data","entities","tickets","ary","console","log","forEach","i","render","time"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport {\n  API_URL,\n  PRO_PREFIX,\n  BACKLOG_API_KEY,\n  BACKLOG_URL,\n  BACKLOG_STATUS,\n  AUTO_UPDATE_MIN,\n  LUPACK_ATTR,\n  WORKING_TIME\n} from \"./utilities/constants.js\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    const date = new Date();\n    this.state = {\n      hour: this.checkTime(date.getHours()),\n      minute: this.checkTime(date.getMinutes()),\n      second: this.checkTime(date.getSeconds()),\n      crt_minute: \"\",\n      beUpdateTickets: \"\"\n    };\n    this.autoUpdate = this.autoUpdate.bind(this);\n    this.checkTime = this.checkTime.bind(this);\n  }\n\n  checkTime(elem) {\n    if (elem < 10) {\n      elem = \"0\" + elem;\n    }\n    return elem;\n  }\n\n  //Kiểm tra giờ giấc hợp lệ thì update\n  autoUpdate() {\n    const date = new Date();\n    this.setState({\n      hour: this.checkTime(date.getHours()),\n      minute: this.checkTime(date.getMinutes()),\n      second: this.checkTime(date.getSeconds())\n    });\n    let crt_minute = this.state.crt_minute;\n    let minute = this.state.minute;\n    if (\n      this.state.hour >= WORKING_TIME.start &&\n      this.state.hour < WORKING_TIME.end\n    ) {\n      if (minute == 19 && minute !== crt_minute) {\n        this.setState({ crt_minute: minute });\n        this.getDataLupack();\n      }\n    }\n  }\n\n  //Set thời gian update logic. Hiện tại: Cứ 1000ms thì update 1 lần\n  componentDidMount() {\n    window.setInterval(this.autoUpdate, 1000);\n  }\n\n  //Lấy data từ Lupack\n  getDataLupack() {\n    const mileStone = LUPACK_ATTR.mileStone;\n    const tmp =\n      mileStone.LuDev + \"-\" + mileStone.LuTest + \"-\" + mileStone.LuFix;\n    const url =\n      API_URL +\n      \"fdoc_t_ticket/find/pro_id=\" +\n      LUPACK_ATTR.proId +\n      \"&mile_stone=\" +\n      tmp +\n      \"&status=\" +\n      LUPACK_ATTR.status;\n    axios.get(url).then(response => {\n      this.updateBacklog(response.data.entities.tickets);\n    });\n  }\n\n  //Update Backlog\n  updateBacklog(tickets) {\n    const ary = ['abc','def', 'ghi'];\n    console.log('1');\n    tickets.forEach((elem, i) => {\n      console.log('2');\n    });\n    console.log('3');\n  }\n\n  //Dùng để vẽ màn hình\n  render() {\n    const state = this.state;\n    const time = state.hour + \":\" + state.minute + \":\" + state.second;\n    return (\n      <div className=\"App\">\n        <h1 align=\"center\">{time}</h1>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}