{"ast":null,"code":"var _jsxFileName = \"D:\\\\BLDE_SVN\\\\70_member\\\\XuanLA\\\\auto_backlog\\\\auto_front\\\\src\\\\App.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { API_URL, PRO_PREFIX, BACKLOG_API_KEY, BACKLOG_URL, BACKLOG_STATUS, AUTO_UPDATE_MIN, LUPACK_ATTR, WORKING_TIME } from \"./utilities/constants.js\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    const date = new Date();\n    this.state = {\n      hour: this.checkTime(date.getHours()),\n      minute: this.checkTime(date.getMinutes()),\n      second: this.checkTime(date.getSeconds()),\n      crt_minute: \"\",\n      updateTicket: \"\"\n    };\n    this.autoUpdate = this.autoUpdate.bind(this);\n    this.checkTime = this.checkTime.bind(this);\n  }\n\n  checkTime(elem) {\n    if (elem < 10) {\n      elem = \"0\" + elem;\n    }\n\n    return elem;\n  } //Kiểm tra giờ giấc hợp lệ thì update\n\n\n  autoUpdate() {\n    const date = new Date();\n    this.setState({\n      hour: this.checkTime(date.getHours()),\n      minute: this.checkTime(date.getMinutes()),\n      second: this.checkTime(date.getSeconds())\n    });\n    let crt_minute = this.state.crt_minute;\n    let minute = this.state.minute;\n    let second = this.state.second;\n\n    if (this.state.hour >= WORKING_TIME.start && this.state.hour < WORKING_TIME.end) {\n      if (minute === 30) {\n        if (minute !== crt_minute) {\n          this.setState({\n            crt_minute: minute\n          });\n          this.getDataLupack();\n        }\n\n        if (second === 5) {\n          console.log('sau 5s');\n          console.log(this.state.updateTicket);\n          this.sendNotifyEmail(this.state.updateTicket);\n        }\n      }\n    }\n  }\n\n  sendNotifyEmail(ticketIds) {\n    if (ticketIds !== \"\") {\n      const url = API_URL + \"fdoc_t_ticket/notify_update/ticket=\" + ticketIds;\n      axios.get(url).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n      this.setState({\n        updateTicket: \"\"\n      });\n    }\n  } //Set thời gian update logic. Hiện tại: Cứ 1000ms thì update 1 lần\n\n\n  componentDidMount() {\n    window.setInterval(this.autoUpdate, 1000);\n  } //Lấy data từ Lupack\n\n\n  getDataLupack() {\n    const mileStone = LUPACK_ATTR.mileStone;\n    const tmp = mileStone.LuDev + \"-\" + mileStone.LuTest + \"-\" + mileStone.LuFix;\n    const url = API_URL + \"fdoc_t_ticket/find/pro_id=\" + LUPACK_ATTR.proId + \"&mile_stone=\" + tmp + \"&status=\" + LUPACK_ATTR.status;\n    axios.get(url).then(response => {\n      this.updateBacklog(response.data.entities.tickets);\n    });\n  } //Update Backlog\n\n\n  updateBacklog(tickets) {\n    let date = new Date();\n    let updateTicket = \"\";\n    tickets.forEach((ticket, i) => {\n      const issueName = PRO_PREFIX + ticket.tik_i_trac_id;\n      const urlGet = BACKLOG_URL + \"issues/\" + issueName + \"?apiKey=\" + BACKLOG_API_KEY;\n      axios.get(urlGet).then(response => {\n        const data = response.data;\n\n        if (data.status.id === BACKLOG_STATUS.Open) {\n          const urlUpdate = BACKLOG_URL + \"issues/\" + data.issueKey + \"?apiKey=\" + BACKLOG_API_KEY;\n          axios.patch(urlUpdate, {\n            statusId: BACKLOG_STATUS.InProgress\n          }).then(response2 => {\n            if (updateTicket === \"\") {\n              updateTicket = ticket.tik_i_trac_id;\n            } else {\n              updateTicket = updateTicket + \"-\" + ticket.tik_i_trac_id;\n            }\n\n            this.setState({\n              updateTicket: updateTicket\n            });\n          }).catch(e2 => {\n            console.log(\"Loi1: \" + ticket.tik_i_trac_id);\n          });\n        }\n      }).catch(e => {\n        console.log(\"Loi2: \" + ticket.tik_i_trac_id);\n      });\n    });\n  } //Dùng để vẽ màn hình\n\n\n  render() {\n    const state = this.state;\n    const time = state.hour + \":\" + state.minute + \":\" + state.second;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, time));\n  }\n\n}","map":{"version":3,"sources":["D:/BLDE_SVN/70_member/XuanLA/auto_backlog/auto_front/src/App.js"],"names":["React","axios","API_URL","PRO_PREFIX","BACKLOG_API_KEY","BACKLOG_URL","BACKLOG_STATUS","AUTO_UPDATE_MIN","LUPACK_ATTR","WORKING_TIME","App","Component","constructor","props","date","Date","state","hour","checkTime","getHours","minute","getMinutes","second","getSeconds","crt_minute","updateTicket","autoUpdate","bind","elem","setState","start","end","getDataLupack","console","log","sendNotifyEmail","ticketIds","url","get","then","response","catch","error","componentDidMount","window","setInterval","mileStone","tmp","LuDev","LuTest","LuFix","proId","status","updateBacklog","data","entities","tickets","forEach","ticket","i","issueName","tik_i_trac_id","urlGet","id","Open","urlUpdate","issueKey","patch","statusId","InProgress","response2","e2","e","render","time"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport {\n  API_URL,\n  PRO_PREFIX,\n  BACKLOG_API_KEY,\n  BACKLOG_URL,\n  BACKLOG_STATUS,\n  AUTO_UPDATE_MIN,\n  LUPACK_ATTR,\n  WORKING_TIME\n} from \"./utilities/constants.js\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    const date = new Date();\n    this.state = {\n      hour: this.checkTime(date.getHours()),\n      minute: this.checkTime(date.getMinutes()),\n      second: this.checkTime(date.getSeconds()),\n      crt_minute: \"\",\n      updateTicket: \"\"\n    };\n    this.autoUpdate = this.autoUpdate.bind(this);\n    this.checkTime = this.checkTime.bind(this);\n  }\n\n  checkTime(elem) {\n    if (elem < 10) {\n      elem = \"0\" + elem;\n    }\n    return elem;\n  }\n\n  //Kiểm tra giờ giấc hợp lệ thì update\n  autoUpdate() {\n    const date = new Date();\n    this.setState({\n      hour: this.checkTime(date.getHours()),\n      minute: this.checkTime(date.getMinutes()),\n      second: this.checkTime(date.getSeconds())\n    });\n    let crt_minute = this.state.crt_minute;\n    let minute = this.state.minute;\n    let second = this.state.second;\n    if (\n      this.state.hour >= WORKING_TIME.start &&\n      this.state.hour < WORKING_TIME.end\n    ) {\n      if (minute === 30) {\n        if (minute !== crt_minute) {\n          this.setState({ crt_minute: minute });\n          this.getDataLupack();\n        }\n        if (second === 5) {\n          console.log('sau 5s');\n          console.log(this.state.updateTicket);\n          this.sendNotifyEmail(this.state.updateTicket);\n        }\n      }\n    }\n  }\n\n  sendNotifyEmail(ticketIds) {\n    if (ticketIds !== \"\") {\n      const url = API_URL + \"fdoc_t_ticket/notify_update/ticket=\" + ticketIds;\n      axios\n        .get(url)\n        .then(response => {\n          console.log(response);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n      this.setState({ updateTicket: \"\" });\n    }\n  }\n\n  //Set thời gian update logic. Hiện tại: Cứ 1000ms thì update 1 lần\n  componentDidMount() {\n    window.setInterval(this.autoUpdate, 1000);\n  }\n\n  //Lấy data từ Lupack\n  getDataLupack() {\n    const mileStone = LUPACK_ATTR.mileStone;\n    const tmp =\n      mileStone.LuDev + \"-\" + mileStone.LuTest + \"-\" + mileStone.LuFix;\n    const url =\n      API_URL +\n      \"fdoc_t_ticket/find/pro_id=\" +\n      LUPACK_ATTR.proId +\n      \"&mile_stone=\" +\n      tmp +\n      \"&status=\" +\n      LUPACK_ATTR.status;\n    axios.get(url).then(response => {\n      this.updateBacklog(response.data.entities.tickets);\n    });\n  }\n\n  //Update Backlog\n  updateBacklog(tickets) {\n    let date = new Date();\n    let updateTicket = \"\";\n    tickets.forEach((ticket, i) => {\n      const issueName = PRO_PREFIX + ticket.tik_i_trac_id;\n      const urlGet =\n        BACKLOG_URL + \"issues/\" + issueName + \"?apiKey=\" + BACKLOG_API_KEY;\n      axios\n        .get(urlGet)\n        .then(response => {\n          const data = response.data;\n          if (data.status.id === BACKLOG_STATUS.Open) {\n            const urlUpdate =\n              BACKLOG_URL +\n              \"issues/\" +\n              data.issueKey +\n              \"?apiKey=\" +\n              BACKLOG_API_KEY;\n            axios\n              .patch(urlUpdate, {\n                statusId: BACKLOG_STATUS.InProgress\n              })\n              .then(response2 => {\n                if (updateTicket === \"\") {\n                  updateTicket = ticket.tik_i_trac_id;\n                } else {\n                  updateTicket = updateTicket + \"-\" + ticket.tik_i_trac_id;\n                }\n                this.setState({ updateTicket: updateTicket });\n              })\n              .catch(e2 => {\n                console.log(\"Loi1: \" + ticket.tik_i_trac_id);\n              });\n          }\n        })\n        .catch(e => {\n          console.log(\"Loi2: \" + ticket.tik_i_trac_id);\n        });\n    });\n  }\n\n  //Dùng để vẽ màn hình\n  render() {\n    const state = this.state;\n    const time = state.hour + \":\" + state.minute + \":\" + state.second;\n    return (\n      <div className=\"App\">\n        <h1 align=\"center\">{time}</h1>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}